let os = require('os');
let express = require('express');
let http = require('http');
let socketIo = require('socket.io');
const logger = require('node-yolog');

let coloctorConfig = require('core/coloctor.json');

const staticRouter = require('core/routes/static');
const apiRouter = require('core/routes/api');

let app = express();
let server = http.createServer(app);
let io = socketIo.listen(server);

let ifaces = os.networkInterfaces();

app.use('/', staticRouter);
app.use('/api', apiRouter);

// app.post('/api/authenticate', function (req, res) {
//   logger.todo('api/authenticate');
// });

function init () {
  logger.info('Init core app');
  server.listen(coloctorConfig.port, coloctorConfig.hostname, null, function () {
    let address = server.address();
    let path = address.address;
    logger.info('Application runs: http://' + path + ':' + coloctorConfig.port);
    logger.info('Check available ip to test with device on the same network:');
    Object.keys(ifaces).forEach(function (ifname) {
      let alias = 0;
      ifaces[ifname].forEach(function (iface) {
        if ('IPv4' !== iface.family || iface.internal !== false) {
          // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
          return;
        }
        if (alias >= 1) {
          // this single interface has multiple ipv4 addresses
          logger.info('\t-', ifname + ':' + alias, iface.address);
        }
        else {
          // this interface has only one ipv4 adress
          logger.info('\t-', ifname, iface.address);
        }
        ++alias;
      });
    });
  });
}

module.exports = exports = {
  init: init
};